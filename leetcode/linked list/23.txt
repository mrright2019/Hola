/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode(int x) : val(x), next(NULL) {}
 * };
 */
class Solution {
public:
    ListNode* mergeKLists(vector<ListNode*>& lists) {
		if(lists.size()==0) return NULL;
		while(lists.size()>1){
            lists.push_back(mergeTwoLists(lists[0],lists[1]));
            lists.erase(lists.begin());
            lists.erase(lists.begin());
        }
		return lists.front();
	}
	ListNode* mergeTwoLists(ListNode* l1, ListNode* l2) {
		if (l1 == NULL)
			return l2;
		if (l2 == NULL)
			return l1;
		ListNode* res = new ListNode(0);
		ListNode* p = res;
		while (l1 != NULL && l2 != NULL) {
			if (l1->val <= l2->val) {
				p->next = new ListNode(l1->val);
				p = p->next;
				l1 = l1->next;
			} else {
				p->next = new ListNode(l2->val);
				p = p->next;
				l2 = l2->next;
			}
		}
		while (l1 != NULL) {
			p->next = new ListNode(l1->val);
			p = p->next;
			l1 = l1->next;
		}
		while (l2 != NULL) {
			p->next = new ListNode(l2->val);
			p = p->next;
			l2 = l2->next;
		}
		return res->next;
	}
};